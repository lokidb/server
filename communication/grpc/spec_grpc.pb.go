// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: spec.proto

package grpc

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LokiDBServiceClient is the client API for LokiDBService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LokiDBServiceClient interface {
	// Delete key
	Del(ctx context.Context, in *DelRequest, opts ...grpc.CallOption) (*DelResponse, error)
	// Flush all keys
	Flush(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
	// Get value by key
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error)
	// Get list of all keys
	Keys(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*KeysResponse, error)
	// Set key-value
	Set(ctx context.Context, in *SetRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type lokiDBServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLokiDBServiceClient(cc grpc.ClientConnInterface) LokiDBServiceClient {
	return &lokiDBServiceClient{cc}
}

func (c *lokiDBServiceClient) Del(ctx context.Context, in *DelRequest, opts ...grpc.CallOption) (*DelResponse, error) {
	out := new(DelResponse)
	err := c.cc.Invoke(ctx, "/lokidb.LokiDBService/Del", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lokiDBServiceClient) Flush(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/lokidb.LokiDBService/Flush", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lokiDBServiceClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error) {
	out := new(GetResponse)
	err := c.cc.Invoke(ctx, "/lokidb.LokiDBService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lokiDBServiceClient) Keys(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*KeysResponse, error) {
	out := new(KeysResponse)
	err := c.cc.Invoke(ctx, "/lokidb.LokiDBService/Keys", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lokiDBServiceClient) Set(ctx context.Context, in *SetRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/lokidb.LokiDBService/Set", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LokiDBServiceServer is the server API for LokiDBService service.
// All implementations must embed UnimplementedLokiDBServiceServer
// for forward compatibility
type LokiDBServiceServer interface {
	// Delete key
	Del(context.Context, *DelRequest) (*DelResponse, error)
	// Flush all keys
	Flush(context.Context, *empty.Empty) (*empty.Empty, error)
	// Get value by key
	Get(context.Context, *GetRequest) (*GetResponse, error)
	// Get list of all keys
	Keys(context.Context, *empty.Empty) (*KeysResponse, error)
	// Set key-value
	Set(context.Context, *SetRequest) (*empty.Empty, error)
	mustEmbedUnimplementedLokiDBServiceServer()
}

// UnimplementedLokiDBServiceServer must be embedded to have forward compatible implementations.
type UnimplementedLokiDBServiceServer struct {
}

func (UnimplementedLokiDBServiceServer) Del(context.Context, *DelRequest) (*DelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Del not implemented")
}
func (UnimplementedLokiDBServiceServer) Flush(context.Context, *empty.Empty) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Flush not implemented")
}
func (UnimplementedLokiDBServiceServer) Get(context.Context, *GetRequest) (*GetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedLokiDBServiceServer) Keys(context.Context, *empty.Empty) (*KeysResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Keys not implemented")
}
func (UnimplementedLokiDBServiceServer) Set(context.Context, *SetRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Set not implemented")
}
func (UnimplementedLokiDBServiceServer) mustEmbedUnimplementedLokiDBServiceServer() {}

// UnsafeLokiDBServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LokiDBServiceServer will
// result in compilation errors.
type UnsafeLokiDBServiceServer interface {
	mustEmbedUnimplementedLokiDBServiceServer()
}

func RegisterLokiDBServiceServer(s grpc.ServiceRegistrar, srv LokiDBServiceServer) {
	s.RegisterService(&LokiDBService_ServiceDesc, srv)
}

func _LokiDBService_Del_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LokiDBServiceServer).Del(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lokidb.LokiDBService/Del",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LokiDBServiceServer).Del(ctx, req.(*DelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LokiDBService_Flush_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LokiDBServiceServer).Flush(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lokidb.LokiDBService/Flush",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LokiDBServiceServer).Flush(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _LokiDBService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LokiDBServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lokidb.LokiDBService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LokiDBServiceServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LokiDBService_Keys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LokiDBServiceServer).Keys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lokidb.LokiDBService/Keys",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LokiDBServiceServer).Keys(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _LokiDBService_Set_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LokiDBServiceServer).Set(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lokidb.LokiDBService/Set",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LokiDBServiceServer).Set(ctx, req.(*SetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LokiDBService_ServiceDesc is the grpc.ServiceDesc for LokiDBService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LokiDBService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "lokidb.LokiDBService",
	HandlerType: (*LokiDBServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Del",
			Handler:    _LokiDBService_Del_Handler,
		},
		{
			MethodName: "Flush",
			Handler:    _LokiDBService_Flush_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _LokiDBService_Get_Handler,
		},
		{
			MethodName: "Keys",
			Handler:    _LokiDBService_Keys_Handler,
		},
		{
			MethodName: "Set",
			Handler:    _LokiDBService_Set_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "spec.proto",
}
